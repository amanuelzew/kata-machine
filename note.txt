what is Big O
Big O notation is used to describe the time complexity of data structures and algorithms:

Important concepts
1.growth is with respect to the input
2.Constants are dropped
3.Worst case is usually the way we measure

*array
-a data structure that stores related data in a collection of elements, or boxes, 
where each element has a position and can hold a value
-it is a contigous location

*linear search O(N)
-geedy algorithm

*binary search 
-An efficient algorithm for finding an item from a sorted list of items.
It works by repeatedly dividing in half the portion of the list that could contain the item, 
until you've narrowed down the possible locations to just one.
-the array becomes n/2 n/4 n/8 ..... n/2^k this meand log 2^n=k
O(logN) 
O(NlogN)-if we look the halfed array linearly
-two crystal ball problem   
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
                  ^        *     ^
jump by 5,first ball breaks at 15's story then go back to 10 then linearly look for a break point

*bubble sort
-repeatedly steps through the list to be sorted,
compares adjacent items, and swaps them if they are in the wrong order.
-gausian sum the number from 1..100 in a short time while he was a kid using n(n+1)/2
O(N^2)
5,7,4,1 -> 5,4,1,7

*selection
-It works by repeatedly finding the minimum element from the unsorted portion
and placing it at the beginning of the sorted portion.
O(N^2)
5,7,4,1 -> 1,4,1,5

*insertion
-Imagine holding a hand of playing cards and you want to sort them in ascending order.
You take one card at a time and insert it into its correct position among the previously sorted cards.
O(N^2)
5,6,4,1 -> [in between 5,6,6,1 -> 5,5,6,1] -> 4,5,6,1

*quick sort
-it is a divide and conqure algorithm
-everything less than the pivot will be less or equal to it;everything to the right will be larger
-O(n log n) or [ O(n^2) if its a reversed array ]
8,7,6,4,5 -> [4,7,6,8,5 in between] -> 4,5,6,8,7

*merge sort
-it is a divide and conqure algorithm
-O(n log n) 
Initial Array: [38, 27, 43, 3, 9, 82, 10]
Divide:
[38, 27, 43, 3] | [9, 82, 10]
[38, 27] | [43, 3] | [9] | [82, 10]
[38] | [27] | [43] | [3] | [9] | [82] | [10]

Merge:
[27, 38] | [3, 43] | [9] | [10, 82]
[3, 27, 38, 43] | [9, 10, 82]
[3, 9, 10, 27, 38, 43, 82]

*Linked list
-what sucked aobut array its un growable,there in no deletion and insertion
-it is a node based DS

*Queue
-a line a FIFO structure
-specfic implemntation of a linked list,constrainig what we can do with linked list

*Stack
-a line a LIFO structure
-Think of it like a stack of plates: you add new plates to the top, 
and you remove plates from the top as well.The last plate you put on is the first one you take off.


*Arrya list,Array buffer

*Recursion 
-a technique used to solve problems by breaking them down into smaller instances of the same problem
-solves problems by using functions that call themselves within their own code
-the line analogy (what number am i?) =ask the questuon what number are you? for every person in front 
until we reach the first person 
-call stack=it is like a todo list


*maze solver




*Doubly linked list

*Tree
-tree terminologies binary tree,leaf,branching factor
-traversals pre,in,post order (DFS) they preserve the shape 
-BFS 
-exercise  Balanced Binary Tree,Univalued Binary Tree,compare two trees,
Construct Binary Tree from Preorder and Inorder Traversal

*BST
-find=running time is between logn-O(n) or logn-O(h)
-insert
[15,7,51,4,X,25,100,X,X,X,37,X,X] in BFS
-deletion 
 case 1-no child    ->just delete it delete(4)
 case 2-one child   ->move the parent pointer to the child (a lot like LL) delete(7)
 case 3-got 2 child ->move to the left and look for the larget element and replace it delete(51)
-balancing ->AVL red-black
-inoredr traversal gives orderd list
-exercise validBST

*Heap
-priority queue